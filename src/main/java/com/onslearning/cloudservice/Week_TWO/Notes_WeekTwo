****************************************************************************************************************
                                                ONSJHJSA
****************************************************************************************************************

**** JAVA SERVLETS:
1. Java technology which handles the incoming web requests is "Servlets".
2. When browser makes HTTP requests, it goes to "Web Container" which contains one or more Java servlets.
    Based on the type of request one Java servlets handles the request.
3. Servlets has methods like "doGet()", "doPost()", "doPut()" and "doDelete()". Based on the type of
    request method, appropriate servlet method is called.
4. Based on the request which servlets to call is identified by "web.xml" file.

**** Video Servlet Operations code:
1. User is trying to upload a video on the server. Built the servlets that allows this functionality.
2. Create a simple class "Video.java". This class contains video metadata such as "Name", "URL" and
    "videoDuration". I generated parameterized constructor and getters and setters method.
3. Create a class "VideoServlets" which extends the "HTTPServlets" class. This class contains
    "doGet()", "doPost()" methods to define the logic of the code.
    -> doGet and doPost methods called based on the type of web request. Based on web request, which
    method needs to call can be defined in "Web.xml" file.
    -> [for eg. To handle GET type of request, web.xml file suggest to use "doGet()". ]

[i.] doGet() method implementation:

     private List<Video> videoList = new ArrayList<Video>();

        @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

            /**
             * Set content type header so client can properly and securely display the content that I send back
             */
            resp.setContentType("text/plain");

            /**
             * This PrintWriter allows us to write data to HTTP response body that is going to be sent to the client.
             */
            PrintWriter sendToClient = resp.getWriter();

            /**
             * Loop through all the stored video in ArrayList and print their name and URL into HTTP response body.
             */
            for(Video v : videoList){
                sendToClient.write(v.getName() + " : " + v.getURL() + "\n");
            }

        }

[ii] doPost() implementation:

        @Override
            protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

                /**
                 * 1. Extract the HTTP request param that are wxpected from URL Query String or URL encoded form body.
                 */
                String name = req.getParameter("name");
                String URL = req.getParameter("URL");
                String durationStr = req.getParameter("duration");

                /**
                 * Convert string duration into number.
                 */
                long durationVideo = -1;
                durationVideo = Long.parseLong(durationStr);

                /**
                 * Set the content type Header so Client's browser know the format of the data and how to interpret it.
                 */
                resp.setContentType("text/plain");

                /**
                 * Validate the query parameters received from the URL. If there is invalid data in request param then Server should send
                 * HTTP 400 Bad Request error to the client.
                 */
                if(name == null || URL == null || durationStr == null || name.trim().length()<1 || URL.trim().length()<1 || durationStr.trim().length()<1){
                    resp.sendError(400,"Invalid Name, URL or Video duration");
                }
                else{
                    /**
                     * If all the string param are valid then create an object of class Video with name, URL and duration.
                     */
                    Video v = new Video("Shiv Dhun","www.youtube.com/shivdhun",120);
                    videoList.add(v);
                }

            }//end of post method.

================================================================================================================
================================================================================================================

**** SPRING DISPATCHER SERVLETS:

1. In normal Java Servlets the process flow to handle request is:

    doGet(Request){
        i. Extract the param from Request URL.
        ii. Validate the param. [Not null, not invalid]
        iii. construct java obj using these request param.
        iv. Logic to handle request.
    }

2. In any Web Request in Java Servlet, I need to follow steps i,ii,iii. Which is unnecessary operations
    to follow each time. These code is called Boiler Plate code.

3. One of the solutions to remove boiler plate code is use of Spring framework. Spring Framework has
    specialized servlets=> "DispatcherServlets" whose operation is similar to Java Servlets.
4. DispatcherServlets has "Controller" which handles the request. DispatcherServlets remove the boiler
    plate code.

================================================================================================================
================================================================================================================

**** @ResponseBody:

1. Usually in API, Dev needs to send message back. For eg of GET or POST request Dev can send a confirmation String message.
2. In other cases, Dev returns object of the class. In assignment 1, Dev is responding the object of the "Video" class.
3. Now, Dev needs to have an implementation of converting the video class object into HTTP Response that User can actually see.
4. This conversion Object of Java class into HTTP Response can be achieved by using "@ResponseBody" annotation.

For Eg:

     @RequestMapping(value = "/video", method = RequestMethod.GET)
     public @ResponseBody Video getVideo(Video v){
        //.... line of code
        return new Video();     //Returning the object of Video class.
     }

================================================================================================================
================================================================================================================

**** Jackson - Convert JSON Payload into Java Object vise versa:

1. In RESTFul API, JSON Payload is mapped into Java Object. This can be achieve by Jackson library.
2. For Eg, Dev created a class "Video" with "private" param as name, URL, duration ect. Dev created getter & Setter property.

    public class Video {
        private String name;
        private String URL;
        private long duration;

        public Video(String name, String URL, long duration) {
            this.name = name;
            this.URL = URL;
            this.duration = duration;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getURL() {
            return URL;
        }

        public void setURL(String URL) {
            this.URL = URL;
        }

        public long getDuration() {
            return duration;
        }

        public void setDuration(long duration) {
            this.duration = duration;
        }


3. In Rest API, Dev received JSON payload with name, URL and duration.

    "{
        "name" : "jacksonVideo",
        "URL" : "http://localhost:8080/getJackson",
        "duration" : 12345
    }"

4. API received JSON payload and convert / mapped into object of Video class. This is done by Jackson library.

    public Video getJacksonVideo(@RequestBody Video v)
    {
        Video newVideo = new Video(v.getName(), v.getURL(), v.getDuration());
        return newVideo;
    }

5. Jackson takes the JSON payload and mapped each attribute with appropriate Setter method.
For eg:
        Jackson takes "name" param and mapped the value with "setName()" method of Video class.
        Similarly, all the param mapped with their appropriate SetterMethod.

6. If Dev wants Jackson to ignore some parameters and not convert them into Object then use @JsonIgnore.
For Eg:
        @JsonIgnore
        public void setDuration(long duration){
            this.duration = duration
        }

-> Here, SetDuration method is annotated as @JsonIgnore which tells Jackson lib to not convert JSON param into class object.

================================================================================================================
================================================================================================================

**** Spring Dependency Injection and @Autowired:

1. I created a Controller class "UserController" and Service package includes interface "UserService" which has two abstract methods "getUsers()"
    and "getAge(String Name)".
2. In Entity package, I have a User class with private name, age and city properties with constructor, getters and setters.

3. Dependency Injection: Spring provides object of the class automatically when required. This is the concept of
    Inversion of Control.

For eg:
    -> I need object of UserService in a controller class. I need to annotated with "@Autowired" annotation.

        @Controller
        public class UserController {

            @Autowired
            private UserService userService;

        }

-> I created a "UserServiceImpl" class and implements UserService interface. This class implemented abstract methods.

    public class UserServiceImpl implements UserService {

        User aUser;

        @Override
        public User getUsers() {

            aUser = new User("Sagar", 25, "Denver");
            return aUser;
        }

        @Override
        public int getUserAge(String userName) {
            if(aUser.getName() == userName)
                return aUser.getAge();

            else
                return 0;
        }
    }

-> I need a Configuration class which defines mapping between autowired interfaces and class which implements this interface.
    I created a class "UserConfig" class with @Configuration annotation.
